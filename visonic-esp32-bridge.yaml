substitutions:
  PLUGIN_NAME: "visonic-bridge"
  FRIENDLY_NAME: Visonic Powerlink Bridge
  RX_FROM_PANEL_TX: "19"      # ;    // This is Rx, connect this pin to the Tx on the Panel
  TX_TO_PANEL_RX: "21"        # ;    // This is Tx, connect this pin to the Rx on the Panel
  RX_FROM_POWERLINK_TX: "16"  # ;    // This is Rx, connect this pin to the Tx on the Powerlink 3.1 Hardware Module
  TX_TO_POWERLINK_RX: "17"    # ;    // This is Tx, connect this pin to the Rx on the Powerlink 3.1 Hardware Module
  LED_BUILTIN: GPIO2
  MY_BOARD: "esp32doit-devkit-v1"

esphome:
  name: ${PLUGIN_NAME}
  name_add_mac_suffix: false
  friendly_name: ${FRIENDLY_NAME}
  platform: esp32
  board: ${MY_BOARD}
  project:
    name: esphome.web
    version: '1.0'

external_components:
  - source: github://oxan/esphome-stream-server

web_server:
  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  reboot_timeout: 1800s               # ESPHome website says that it can have problems with this
  power_save_mode: none
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${FRIENDLY_NAME} Hotspot"
    password: !secret wifi_password
    ap_timeout: 600s
    manual_ip:
      static_ip: !secret visonic_bridge_network_ip
      gateway: !secret network_gateway
      subnet: !secret network_mask

  manual_ip:
    static_ip: !secret visonic_bridge_network_ip
    gateway: !secret network_gateway
    subnet: !secret network_mask

captive_portal:

# Disable logging
logger:
  level: DEBUG           # INFO
  tx_buffer_size: 1024 
  baud_rate: 0           # disables logging to the serial UART (as we are using it for other things)
  
# Enable Home Assistant API
api:
  reboot_timeout: 0s
  encryption:
    key: !secret visonic_bridge_esphome_encrypt
  services:
    - service: blink
      then:
        - switch.turn_on: blinky
        - delay: 5s
        - switch.turn_off: blinky

ota:
  password: !secret device_password

# Text sensors with general information
text_sensor:
  - platform: version
    name: "${FRIENDLY_NAME} Version"
  - platform: wifi_info
    ip_address:
      name: "${FRIENDLY_NAME} IP"
    ssid:
      name: "${FRIENDLY_NAME} SSID"
    bssid:
      name: "${FRIENDLY_NAME} BSSID"

button:
  # Switch to restart the plugin
  - platform: restart
    name: "${FRIENDLY_NAME} Restart"

binary_sensor:
  - platform: stream_server
    connected:
      name: Connected

sensor:
  - platform: wifi_signal
    name: "${FRIENDLY_NAME} WiFi Signal"
    update_interval: 60s
  - platform: stream_server
    connection_count:
      name: Number of connections

switch:
  - platform: gpio
    name: "${FRIENDLY_NAME}_on_board_led"
    pin:
       number: ${LED_BUILTIN}
       inverted: False
       mode: OUTPUT
    id: blinky

# Example configuration entry
globals:
  - id: powerlink_error_count
    type: int
    restore_value: no
  - id: panel_error_count
    type: int
    restore_value: no

script:
  - id: change_baud_rate_script
    # This script changes the baud rate of the 2 UART connections (Powerlink and Panel)
    #      It works even if the Powerlink Hardware is not actually connected
    #      It sets both UARTS to be the same baud rate
    parameters:
      baud: int
    then:
       - lambda: |-
          id(uart_bus_panel).flush();
          id(uart_bus_powerlink).flush();
          // Set the same baud rate on both UART connections
          ESP_LOGI("change_baud_rate_script", "Setting baud rate to %i", baud);
          if (id(uart_bus_panel).get_baud_rate() != baud) {
            ESP_LOGD("change_baud_rate_script", "    Changing Panel baud rate from %i to %i",id(uart_bus_panel).get_baud_rate(), baud);
            id(uart_bus_panel).set_baud_rate(baud);
            id(uart_bus_panel).load_settings();
          }
          if (id(uart_bus_powerlink).get_baud_rate() != baud) {
            ESP_LOGD("change_baud_rate_script", "    Changing Powerlink baud rate from %i to %i",id(uart_bus_powerlink).get_baud_rate(), baud);
            id(uart_bus_powerlink).set_baud_rate(baud);
            id(uart_bus_powerlink).load_settings();
          }

uart:
  - id: uart_bus_panel
    baud_rate: 9600
    tx_pin: ${TX_TO_PANEL_RX}
    rx_pin: ${RX_FROM_PANEL_TX}
    stop_bits: 1
    data_bits: 8
    parity: NONE
    rx_buffer_size: 512
    debug:
      direction: BOTH
      dummy_receiver: false
      after:
         timeout: 1ms
      sequence:
        - lambda: |-
            if (direction == uart::UART_DIRECTION_RX) {
              UARTDebug::log_hex(direction, bytes, ' ');
              id(uart_bus_powerlink).write_array(bytes.data(), bytes.size());
              if (bytes[0] != 0x0D) {
                ESP_LOGI("uart_bus_panel", "    Panel: Header is not 0D");
                id(panel_error_count) += 1;
                if (id(panel_error_count) > 5) {
                  ESP_LOGI("uart_bus_panel", "  Changing Baud (Panel error)");
                  // Swap baud rate, if already 9600 then set to 38400 else 9600
                  uint32_t new_baud_rate = ( (id(uart_bus_panel).get_baud_rate() == 9600) ? 38400 : 9600 );
                  id(change_baud_rate_script)->execute(new_baud_rate);
                  id(panel_error_count) = -100;    // Give the new baud rate plenty of time to try it before swapping back
                }
              }
              else {
                id(panel_error_count) -= 1;
              }
            }
        #- switch.turn_on: blinky
   
  - id: uart_bus_powerlink
    baud_rate: 9600
    tx_pin: ${TX_TO_POWERLINK_RX}
    rx_pin: ${RX_FROM_POWERLINK_TX}
    stop_bits: 1
    data_bits: 8
    parity: NONE
    rx_buffer_size: 512
    debug:
      direction: BOTH
      dummy_receiver: true
      after:
         timeout: 1ms
      sequence:
        - lambda: |-
            if (direction == uart::UART_DIRECTION_RX) {
              UARTDebug::log_hex(direction, bytes, ' ');

              id(uart_bus_panel).write_array(bytes.data(), bytes.size());

              if (bytes[0] != 0x0D) {
                id(powerlink_error_count) += 1;
                ESP_LOGI("uart_bus_powerlink", "Powerlink: Header is not 0D    count=%i", id(powerlink_error_count));
                if (id(powerlink_error_count) > 5) {
                  ESP_LOGI("uart_bus_powerlink", "  Changing Baud (Powerlink error)");
                  // Swap baud rate, if already 9600 then set to 38400 else 9600
                  uint32_t new_baud_rate = ( (id(uart_bus_panel).get_baud_rate() == 9600) ? 38400 : 9600 );
                  id(change_baud_rate_script)->execute(new_baud_rate);
                  id(powerlink_error_count) = -10;    // Give the new baud rate plenty of time to try it before swapping back
                }
              }
              else {
                if (id(powerlink_error_count) > 0) {
                  id(powerlink_error_count) -= 1;
                }
              }

              if (bytes[0] == 0x0D && bytes[1] == 0xB0 && bytes[2] == 0x00 && bytes[3] == 0x41) {    // 0D B0 00 41
                ESP_LOGI("uart_bus_powerlink", "Received Powerlink Change Baud Command, setting baud to 38400");
                // Send Powerlink Acknowledge back to the Powerlink (at the current baud rate)
                byte pl_ack[5]={0x0D,0x02,0x43,0xBB,0x0A};
                id(uart_bus_powerlink).write_array(pl_ack, 5);
                // Change the Baud
                id(change_baud_rate_script)->execute(38400);
                id(powerlink_error_count) = -100;    // Give the new baud rate plenty of time to try it before swapping back
              }
            }
        #- switch.turn_off: blinky

stream_server:
  - uart_id: uart_bus_panel
    buffer_size: 512
    id: my_stream_a
    port: !secret network_port

# The following select allows the baud rate to be changed by the user (Home Assistant)
select:
  - id: change_baud_rate
    name: Visonic Baud rate
    platform: template
    options:
      - "9600"
      - "38400"
    initial_option: "9600"
    optimistic: true
    restore_value: True
    internal: false
    entity_category: config
    icon: mdi:swap-horizontal
    set_action:
      - script.execute:         
          id:         change_baud_rate_script
          baud:       !lambda return stoi(x);
